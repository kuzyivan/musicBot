import os
import subprocess
import glob
import shutil
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ systemd –∏–ª–∏ .env
VENV_PYTHON = "/opt/qobuz-env/bin/python"
QOBUZ_DL = "/opt/qobuz-env/bin/qobuz-dl"
DOWNLOAD_DIR = os.path.expanduser("~/Qobuz Downloads")

# üéØ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)


# üëã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéß KuzyMusicBot –∑–∞–ø—É—â–µ–Ω!\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å /download <—Å—Å—ã–ª–∫–∞ –Ω–∞ Qobuz —Ç—Ä–µ–∫>")


# ‚¨áÔ∏è /download
async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    url = context.args[0]
    await update.message.reply_text(f"‚¨áÔ∏è –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞:\n{url}")

    try:
        # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏
        if os.path.exists(DOWNLOAD_DIR):
            shutil.rmtree(DOWNLOAD_DIR)
        os.makedirs(DOWNLOAD_DIR, exist_ok=True)

        # üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        result = subprocess.run(
            [QOBUZ_DL, "dl", url],
            check=True,
            capture_output=True,
            text=True
        )
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n" + result.stdout)

        # üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        flac_files = glob.glob(os.path.join(DOWNLOAD_DIR, "**/*.flac"), recursive=True)
        cover_files = glob.glob(os.path.join(DOWNLOAD_DIR, "**/cover.jpg"), recursive=True)

        if not flac_files:
            await update.message.reply_text("üò¢ –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
            return

        # üéµ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        flac_path = flac_files[0]
        with open(flac_path, "rb") as audio_file:
            await update.message.reply_audio(audio=audio_file, title="üé∂ –¢–≤–æ—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å Qobuz")

        # üñº –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–ª–æ–∂–∫–∏
        if cover_files:
            with open(cover_files[0], "rb") as cover:
                await update.message.reply_photo(photo=cover, caption="üìÄ –û–±–ª–æ–∂–∫–∞ –∞–ª—å–±–æ–º–∞")

        # üßπ –£–¥–∞–ª–µ–Ω–∏–µ
        shutil.rmtree(DOWNLOAD_DIR)
        logger.info("–£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")

    except subprocess.CalledProcessError as e:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:\n" + e.stderr)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.")
    except Exception as e:
        logger.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n" + str(e))
        await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")


# üöÄ –ó–∞–ø—É—Å–∫
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("download", handle_download))

    logger.info("KuzyMusicBot –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == "__main__":
    main()