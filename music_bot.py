import os
import shlex
import asyncio
import logging
import datetime
import subprocess
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
DOWNLOAD_DIR = os.path.expanduser("~/musicBot/Qobuz/Downloads")
VENV_PYTHON = "/opt/qobuz-env/bin/python"
QOBUZ_DL = "/opt/qobuz-env/bin/qobuz-dl"

# –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
download_queue = asyncio.Queue()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
def create_progress_bar(percent):
    total_blocks = 10
    filled_blocks = int(percent / (100 / total_blocks))
    bar = "‚ñà" * filled_blocks + "‚ñë" * (total_blocks - filled_blocks)
    return f"[{bar}]"

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_track(update: Update, release_id: str):
    folder = os.path.join(DOWNLOAD_DIR, os.listdir(DOWNLOAD_DIR)[0])  # –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
    logger.info(f"–ò—â–µ–º —Ç—Ä–µ–∫ –≤ –ø–∞–ø–∫–µ: {folder}")

    for filename in os.listdir(folder):
        if filename.lower().endswith(".flac") or filename.lower().endswith(".mp3"):
            filepath = os.path.join(folder, filename)
            cover_path = os.path.join(folder, "cover.jpg")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            with open(filepath, "rb") as audio_file:
                if os.path.exists(cover_path):
                    with open(cover_path, "rb") as thumb:
                        await update.message.reply_audio(audio=audio_file, thumbnail=thumb)
                else:
                    await update.message.reply_audio(audio=audio_file)

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
            subprocess.run(["rm", "-rf", folder])
            logger.info("–£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")

            break

# –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
async def download_worker():
    while True:
        link, update = await download_queue.get()
        try:
            release_id = link.strip().split("/")[-1]
            cmd = f"{QOBUZ_DL} dl --no-db {shlex.quote(link)}"
            logger.info(f"–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {cmd}")

            progress_msg = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...\n[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")

            process = await asyncio.create_subprocess_shell(
                cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=DOWNLOAD_DIR
            )

            while True:
                line = await process.stdout.readline()
                if not line:
                    break
                decoded = line.decode().strip()
                logger.info(decoded)

                if "%" in decoded:
                    try:
                        percent_str = decoded.split()[-1].replace("%", "")
                        percent = int(float(percent_str))
                        bar = create_progress_bar(percent)
                        await progress_msg.edit_text(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞...\n{bar} {percent}%")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É: {decoded} ‚Äî {e}")

            stdout, stderr = await process.communicate()

            if process.returncode != 0:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:\n{stderr.decode()}")
                logger.error(stderr.decode())
            else:
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                await progress_msg.edit_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                await send_track(update, release_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.")
        finally:
            download_queue.task_done()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /download, –∞ –ø–æ—Ç–æ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz üéß")

# –ö–æ–º–∞–Ω–¥–∞ /download
async def download_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ñ–¥—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz...")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "qobuz.com/track/" in update.message.text:
        await download_queue.put((update.message.text.strip(), update))
        await update.message.reply_text("üõ∞ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É...")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz üé∂")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ KuzyMusicBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("download", download_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    asyncio.create_task(download_worker())

    logger.info(f"ü§ñ KuzyMusicBot –∑–∞–ø—É—â–µ–Ω –≤ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}")
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùó –û—à–∏–±–∫–∞: {e}")