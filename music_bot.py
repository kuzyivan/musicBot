import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
from subprocess import Popen, PIPE
from uuid import uuid4
from threading import Lock

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—É—Ç–∏
VENV_PYTHON = "/opt/qobuz-env/bin/python"
QOBUZ_DL = "/opt/qobuz-env/bin/qobuz-dl"
DOWNLOAD_DIR = "/root/musicBot/Qobuz/Downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –û—á–µ—Ä–µ–¥—å –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
download_queue = asyncio.Queue()
download_lock = Lock()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /download")

# –ö–æ–º–∞–Ω–¥–∞ /download
async def download_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìé –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if "qobuz.com/track/" in text:
        await download_queue.put((update, context, text))
        await update.message.reply_text("‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏... üåÄ")
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ Qobuz!")

# –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
def find_audio_files(directory):
    found_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith((".flac", ".mp3")):
                full_path = os.path.join(root, file)
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {full_path}")
                found_files.append(full_path)
    return found_files

# –í–æ—Ä–∫–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
async def download_worker():
    while True:
        update, context, url = await download_queue.get()
        chat_id = update.effective_chat.id

        try:
            temp_id = uuid4().hex
            logger.info(f"üîª –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: {url}")
            await context.bot.send_message(chat_id, f"üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞:\n{url}")

            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
            os.chdir(DOWNLOAD_DIR)

            # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            command = [
                QOBUZ_DL, "dl", url,
                "--no-db",
                "--quality", "6"
            ]
            process = Popen(command, stdout=PIPE, stderr=PIPE)
            stdout, stderr = process.communicate()

            stdout_decoded = stdout.decode().strip()
            stderr_decoded = stderr.decode().strip()

            if stdout_decoded:
                logger.info(stdout_decoded)
            if stderr_decoded:
                if "Error" in stderr_decoded or "Exception" in stderr_decoded:
                    logger.error(stderr_decoded)
                else:
                    logger.info(stderr_decoded)

            # –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
            downloaded_files = find_audio_files(DOWNLOAD_DIR)
            if not downloaded_files:
                await context.bot.send_message(chat_id, "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                continue

            track_file = downloaded_files[0]
            cover_file = os.path.join(os.path.dirname(track_file), "cover.jpg")
            cover_file = cover_file if os.path.exists(cover_file) else None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            file_size = os.path.getsize(track_file)
            size_mb = round(file_size / 1024 / 1024, 2)

            try:
                if file_size <= 50 * 1024 * 1024:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –∫–∞–∫ audio ({size_mb} MB)")
                    await context.bot.send_audio(chat_id=chat_id, audio=open(track_file, "rb"))
                elif file_size <= 2 * 1024 * 1024 * 1024:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –∫–∞–∫ document ({size_mb} MB)")
                    await context.bot.send_document(chat_id=chat_id, document=open(track_file, "rb"), filename=os.path.basename(track_file))
                else:
                    await context.bot.send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (> 2 –ì–ë).")
                    logger.warning(f"‚ùó –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {track_file} ({size_mb} MB)")
                    continue
            except Exception as send_err:
                logger.exception("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
                await context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

            if cover_file:
                await context.bot.send_photo(chat_id=chat_id, photo=open(cover_file, "rb"))

            # –£–¥–∞–ª–µ–Ω–∏–µ
            os.remove(track_file)
            if cover_file:
                os.remove(cover_file)

            await context.bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.")

        except Exception as e:
            logger.exception("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞")
            await context.bot.send_message(chat_id, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

        finally:
            download_queue.task_done()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("üöÄ KuzyMusicBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("download", download_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    async def on_startup(app):
        asyncio.create_task(download_worker())
        logger.info("ü§ñ KuzyMusicBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    application.post_init = on_startup
    application.run_polling()