import logging
import os
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("music_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"/start –æ—Ç {user.id} ({user.username})")
    await update.message.reply_text("üé∂ –ü—Ä–∏–≤–µ—Ç! –Ø KuzyMusicBot. –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def post_init(app):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    logger.info(f"ü§ñ KuzyMusicBot –∑–∞–ø—É—â–µ–Ω –≤ {now}")
    if ADMIN_USER_ID:
        try:
            await app.bot.send_message(chat_id=ADMIN_USER_ID, text=f"ü§ñ KuzyMusicBot –∑–∞–ø—É—â–µ–Ω\nüïí {now}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

def main():
    logger.info("üöÄ KuzyMusicBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))

    app.run_polling()

if __name__ == "__main__":
    main()
    
