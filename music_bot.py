import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
from subprocess import Popen, PIPE
from uuid import uuid4
from threading import Lock

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—É—Ç–∏
VENV_PYTHON = "/opt/qobuz-env/bin/python"
QOBUZ_DL = "/opt/qobuz-env/bin/qobuz-dl"
DOWNLOAD_DIR = "/root/musicBot/Qobuz/Downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫
download_queue = asyncio.Queue()
download_lock = Lock()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /download")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /download
async def download_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìé –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
    return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if "qobuz.com/track/" in text:
        await download_queue.put((update, context, text))
        await update.message.reply_text("‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏... üåÄ")
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ Qobuz!")

# –í–æ—Ä–∫–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
async def download_worker():
    while True:
        update, context, url = await download_queue.get()
        chat_id = update.effective_chat.id

        try:
            temp_id = uuid4().hex
            logger.info(f"üîª –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: {url}")
            await context.bot.send_message(chat_id, f"üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")

            # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            command = [QOBUZ_DL, "dl", url, "--no-db"]
            process = Popen(command, stdout=PIPE, stderr=PIPE, cwd=DOWNLOAD_DIR)
            stdout, stderr = process.communicate()

            logger.info(stdout.decode())
            if stderr:
                logger.error(stderr.decode())

            # –ü–æ–∏—Å–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            downloaded_files = [f for f in os.listdir(DOWNLOAD_DIR) if f.endswith(".flac") or f.endswith(".mp3")]
            if not downloaded_files:
                await context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
                continue

            track_file = os.path.join(DOWNLOAD_DIR, downloaded_files[0])
            cover_file = os.path.join(DOWNLOAD_DIR, "cover.jpg") if os.path.exists(os.path.join(DOWNLOAD_DIR, "cover.jpg")) else None

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            await context.bot.send_audio(chat_id=chat_id, audio=open(track_file, "rb"))
            if cover_file:
                await context.bot.send_photo(chat_id=chat_id, photo=open(cover_file, "rb"))

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            os.remove(track_file)
            if cover_file:
                os.remove(cover_file)

            await context.bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.")

        except Exception as e:
            logger.exception("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞")
            await context.bot.send_message(chat_id, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

        finally:
            download_queue.task_done()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("üöÄ KuzyMusicBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("download", download_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    loop = asyncio.get_event_loop()
    loop.create_task(download_worker())
    logger.info("ü§ñ KuzyMusicBot –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()