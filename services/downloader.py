from pathlib import Path
from typing import Optional, Tuple
from config import Config
import logging
import os
import subprocess
import re
import sys
import shutil
import shlex

logger = logging.getLogger(__name__)

class QobuzDownloader:
    def __init__(self):
        self.download_dir = Config.DOWNLOAD_DIR
        self.download_dir.mkdir(parents=True, exist_ok=True)
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ Qobuz (CLI) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def _get_config_path(self) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ config.ini, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç—Å—è deploy-—Å–∫—Ä–∏–ø—Ç–æ–º.
        –ü—É—Ç—å: /opt/musicBot/home/.config/qobuz-dl/config.ini
        """
        # Config.DOWNLOAD_DIR = /opt/musicBot/Qobuz/Downloads
        # APP_DIR = /opt/musicBot
        APP_DIR = Config.DOWNLOAD_DIR.parent.parent
        return str(APP_DIR / "home" / ".config" / "qobuz-dl" / "config.ini")

    def search_and_download_lucky(self, artist: str, title: str) -> Tuple[Optional[Path], Optional[Path]]:
        """
        –ò—â–µ—Ç —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ 'lucky' –∏, —Ç.–∫. –æ–Ω —Å—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞–µ—Ç, 
        –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
        """
        clean_title = re.sub(r'\(.*?\)|\[.*?\]', '', title).strip()
        
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è (—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç Command Injection
        safe_artist = shlex.quote(artist)
        safe_title = shlex.quote(clean_title)
        query = f"{safe_artist} {safe_title}"

        logger.info(f"üîç –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞ Qobuz —á–µ—Ä–µ–∑ 'lucky': '{query}'")

        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        for item in self.download_dir.glob("**/*"):
            if item.is_file(): item.unlink()
            elif item.is_dir(): shutil.rmtree(item)

        try:
            venv_path = Path(sys.executable).parent.parent
            qobuz_dl_path = venv_path / "bin" / "qobuz-dl"
            config_path = self._get_config_path()

            command = [
                str(qobuz_dl_path), "lucky", query, 
                "--type", "track", "--no-db", "-d", str(self.download_dir),
                "--config-path", config_path  # <-- –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
            ]
            result = subprocess.run(command, capture_output=True, text=True, timeout=180)
            
            if result.returncode != 0:
                logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ 'qobuz-dl lucky' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                return None, None

            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ 'lucky' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            return self._find_downloaded_files()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ 'lucky': {e}")
            return None, None

    async def download_track(self, url: str, quality_id: int) -> Tuple[Optional[Path], Optional[Path]]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –ø–æ URL —á–µ—Ä–µ–∑ CLI 'dl'."""
        logger.info(f"‚¨áÔ∏è –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ CLI –¥–ª—è URL: {url} —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ID: {quality_id}")
        try:
            venv_path = Path(sys.executable).parent.parent
            qobuz_dl_path = venv_path / "bin" / "qobuz-dl"
            config_path = self._get_config_path()

            for item in self.download_dir.glob("**/*"):
                if item.is_file(): item.unlink()
                elif item.is_dir(): shutil.rmtree(item)

            command = [
                str(qobuz_dl_path), "dl", url,
                "-q", str(quality_id),
                "--embed-art", "--no-db",
                "-d", str(self.download_dir),
                "--config-path", config_path  # <-- –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
            ]
            result = subprocess.run(command, capture_output=True, text=True, timeout=180)

            if result.returncode != 0:
                logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ 'qobuz-dl dl' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                return None, None
            
            logger.info("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ CLI –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...")
            return self._find_downloaded_files()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ CLI: {e}")
            return None, None

    def _find_downloaded_files(self) -> Tuple[Optional[Path], Optional[Path]]:
        for f in self.download_dir.glob("**/*.*"):
            if f.is_file() and f.suffix in {".flac", ".mp3", ".m4a", ".wav"}:
                # --- –ü–†–û–í–ï–†–ö–ê –û–¢ PATH TRAVERSAL ---
                try:
                    f.resolve().relative_to(self.download_dir.resolve())
                except ValueError:
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞! –§–∞–π–ª '{f}' –≤–Ω–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
                    )
                    continue
                # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

                cover_file = f.parent / "cover.jpg"
                return f, cover_file if cover_file.exists() else None
        return None, None