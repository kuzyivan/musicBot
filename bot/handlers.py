from telegram import Update
from telegram.ext import ContextTypes
from services.downloader import QobuzDownloader
from services.file_manager import FileManager
from config import Config
import logging
import re
import subprocess
from pathlib import Path
from typing import Optional
from mutagen.flac import FLAC, Picture # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º mutagen –¥–ª—è FLAC

logger = logging.getLogger(__name__)

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ ---
def embed_cover_art(audio_path: Path, cover_path: Path):
    if not audio_path or not cover_path or not audio_path.exists() or not cover_path.exists():
        return
    
    logger.info(f"–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ {cover_path} –≤ —Ñ–∞–π–ª {audio_path}...")
    try:
        if audio_path.suffix == '.flac':
            audio = FLAC(audio_path)
            audio.clear_pictures()
            pic = Picture()
            with open(cover_path, 'rb') as f:
                pic.data = f.read()
            pic.type = 3  # Front cover
            pic.mime = 'image/jpeg'
            audio.add_picture(pic)
            audio.save()
            logger.info("–û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤–æ FLAC.")
        # –î–ª—è MP3 –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–æ–∂–∫—É —Å –ø–æ–º–æ—â—å—é mutagen: {e}")

# --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ—Ç –æ–±–ª–æ–∂–∫—É ---
def convert_to_mp3(file_path: Path) -> Optional[Path]:
    mp3_path = file_path.with_suffix(".mp3")
    logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {file_path} –≤ MP3 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±–ª–æ–∂–∫–∏...")
    try:
        command = [
            "ffmpeg", "-i", str(file_path), "-map", "0:a:0", "-b:a", "320k",
            "-map", "0:v?", "-c:v", "copy", "-id3v2_version", "3", str(mp3_path),
        ]
        subprocess.run(command, check=True, capture_output=True)
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {mp3_path}")
        return mp3_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {e}")
        return None

# --- –°–ª–æ–≤–∞—Ä—å –∫–∞—á–µ—Å—Ç–≤ ---
QUALITY_HIERARCHY = { "HI-RES (Max)": 27, "CD (16-bit)": 6, "MP3 (320 kbps)": 5 }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å Qobuz.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/download <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫")

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = context.args[0] if context.args else getattr(getattr(update, 'message', None), 'text', '').strip()
    # ... (–ø—Ä–æ–≤–µ—Ä–∫–∏ url –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ)

    chat_id = update.effective_chat.id
    # ... (–ø—Ä–æ–≤–µ—Ä–∫–∏ url –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ)

    downloader = QobuzDownloader()
    file_manager = FileManager()
    
    audio_file_to_send, cover_file_to_send = None, None
    files_to_delete = set()
    track_details = {}

    try:
        sent_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
        
        for i, (quality_name, quality_id) in enumerate(QUALITY_HIERARCHY.items()):
            await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=f"üíø –ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ: {quality_name}...")
            
            audio_file, cover_file = await downloader.download_track(url, quality_id)
            if cover_file: files_to_delete.add(cover_file)
            if not audio_file: continue

            files_to_delete.add(audio_file)

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
            if audio_file and cover_file:
                embed_cover_art(audio_file, cover_file)

            size_mb = file_manager.get_file_size_mb(audio_file)
            
            if size_mb <= 48:
                audio_file_to_send, cover_file_to_send, track_details['quality_name'] = audio_file, cover_file, quality_name
                break
            else:
                is_last_attempt = (i == len(QUALITY_HIERARCHY) - 1)
                if is_last_attempt:
                    await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=f"üéß –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.2f} MB). –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
                    converted_file = convert_to_mp3(audio_file)
                    if converted_file:
                        files_to_delete.add(converted_file)
                        audio_file_to_send, cover_file_to_send, track_details['quality_name'] = converted_file, cover_file, "MP3 (320 kbps)"
                    break

        if not audio_file_to_send:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
            return

        # ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É, –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
        await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text="üì§ –§–∞–π–ª –≥–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")

        original_name = Path(str(audio_file_to_send).replace(".mp3", ".flac")).name
        album_folder = audio_file_to_send.parent.name
        match = re.match(r"(?P<artist>.+?) - (?P<album>.+?) \((?P<year>\d{4})", album_folder)
        track_details.update(zip(['artist', 'album', 'year'], map(str.strip, match.groups())) if match else zip(['artist', 'album', 'year'], ["Unknown"]*3))
        track_details['title'] = re.sub(r"^\d+\.\s*", "", original_name.rsplit(".", 1)[0]).strip()
        
        ext = audio_file_to_send.suffix
        custom_filename = f"{track_details['artist']} - {track_details['title']} ({track_details['album']}, {track_details['year']}){ext}"
        
        quality_tech_info_match = re.search(r"\[(.*?)\]", album_folder)
        if quality_tech_info_match:
            real_quality = quality_tech_info_match.group(1).replace('B', '-bit').replace('k', ' k')
        elif track_details.get('quality_name') == "MP3 (320 kbps)":
            real_quality = "MP3 (320 kbps)"
        else:
            real_quality = "CD (16-bit / 44.1 kHz)"

        caption_text = (
            f"üé§ **–ê—Ä—Ç–∏—Å—Ç:** `{track_details.get('artist', 'N/A')}`\n"
            f"üéµ **–¢—Ä–µ–∫:** `{track_details.get('title', 'N/A')}`\n"
            f"üíø **–ê–ª—å–±–æ–º:** {track_details.get('album', 'N/A')}\n"
            f"üóìÔ∏è **–ì–æ–¥:** {track_details.get('year', 'N/A')}\n\n"
            f"‚ú® **–ö–∞—á–µ—Å—Ç–≤–æ:** {real_quality}\n\n"
            f"–°–∫–∞—á–∞–Ω–æ —Å [Qobuz]({url})"
        )
        
        with open(audio_file_to_send, 'rb') as f:
            await context.bot.send_audio(chat_id=chat_id, audio=f, filename=custom_filename)

        if cover_file_to_send:
            with open(cover_file_to_send, 'rb') as img:
                await context.bot.send_photo(
                    chat_id=chat_id, 
                    photo=img, 
                    caption=caption_text, 
                    parse_mode='Markdown'
                )
        
        await context.bot.delete_message(chat_id, sent_message.message_id)

    except Exception as e:
        logger.exception("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        for file_to_delete in files_to_delete:
            file_manager.safe_remove(file_to_delete)
        logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")