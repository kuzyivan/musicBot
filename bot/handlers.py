from telegram import Update
from telegram.ext import ContextTypes
from services.downloader import QobuzDownloader
from services.file_manager import FileManager
from services.recognizer import AudioRecognizer
from config import Config
import logging
import re
import subprocess
from pathlib import Path
from typing import Optional
import shutil

logger = logging.getLogger(__name__)

def embed_cover_art(audio_path: Path, cover_path: Optional[Path]):
    if not all([audio_path, cover_path, audio_path.exists(), cover_path.exists()]):
        logger.warning("–ê—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return
    logger.info(f"üñºÔ∏è –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ {cover_path.name} –≤ —Ñ–∞–π–ª {audio_path.name}...")
    temp_output_path = audio_path.with_suffix(f".temp{audio_path.suffix}")
    try:
        command = [
            "ffmpeg", "-i", str(audio_path), "-i", str(cover_path), "-map", "0:a",
            "-map", "1:v", "-c", "copy", "-disposition:v:0", "attached_pic",
            "-id3v2_version", "3", str(temp_output_path)
        ]
        subprocess.run(command, check=True, capture_output=True)
        shutil.move(str(temp_output_path), str(audio_path))
        logger.info("‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–∞.")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–æ–∂–∫—É —Å –ø–æ–º–æ—â—å—é ffmpeg: {e.stderr.decode()}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–æ–∂–∫—É: {e}")
    finally:
        if temp_output_path.exists(): temp_output_path.unlink()

def convert_to_mp3(file_path: Path) -> Optional[Path]:
    mp3_path = file_path.with_suffix(".mp3")
    logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {file_path.name} –≤ MP3...")
    try:
        command = [
            "ffmpeg", "-i", str(file_path), "-map", "0:a:0", "-b:a", "320k",
            "-map", "0:v?", "-c:v", "copy", "-id3v2_version", "3", str(mp3_path),
        ]
        subprocess.run(command, check=True, capture_output=True)
        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {mp3_path.name}")
        return mp3_path
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {e.stderr.decode()}")
        return None

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–õ–û–í–ê–†–¨ –ö–ê–ß–ï–°–¢–í ---
QUALITY_HIERARCHY = {
    "HI-RES (Max >96kHz)": 27,
    "HI-RES (<96kHz)": 7,
    "CD (16-bit)": 6,
    "MP3 (320 kbps)": 5,
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å Qobuz.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/download <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")

async def handle_audio_recognition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    audio_source = message.audio or message.voice
    if not audio_source: return

    sent_message = await message.reply_text("üîé –ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ, –ø—ã—Ç–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å...")
    temp_file_path = None
    try:
        temp_audio_file = await audio_source.get_file()
        temp_file_path = Path(f"{temp_audio_file.file_id}{Path(temp_audio_file.file_path).suffix or '.ogg'}")
        await temp_audio_file.download_to_drive(temp_file_path)
        recognizer = AudioRecognizer()
        track_info = recognizer.recognize(str(temp_file_path))
        if not track_info:
            await sent_message.edit_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫.")
            return
        artist, title = track_info['artist'], track_info['title']
        await sent_message.edit_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: `{artist} - {title}`. –ò—â—É –Ω–∞ Qobuz...", parse_mode='Markdown')
        downloader = QobuzDownloader()
        qobuz_url = downloader.search_track(artist, title)
        if not qobuz_url:
            await sent_message.edit_text(f"‚ùå –¢—Ä–µ–∫ `{artist} - {title}` –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Qobuz.", parse_mode='Markdown')
            return
        await sent_message.delete()
        context.args = [qobuz_url]
        await handle_download(update, context)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        await sent_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    finally:
        if temp_file_path and temp_file_path.exists():
            temp_file_path.unlink()

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = context.args[0] if context.args else getattr(getattr(update, 'message', None), 'text', '').strip()
    if not url: return

    chat_id = update.effective_chat.id
    if not re.match(r"https?://(www\.|open\.|play\.)?qobuz\.com/(.+)", url):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz.")
        return

    downloader, file_manager = QobuzDownloader(), FileManager()
    audio_file_to_send, cover_file_to_send, files_to_delete, track_details = None, None, set(), {}

    try:
        sent_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
        
        for i, (quality_name, quality_id) in enumerate(QUALITY_HIERARCHY.items()):
            await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=f"üíø –ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ: {quality_name}...")
            
            audio_file, cover_file = await downloader.download_track(url, quality_id)
            if cover_file: files_to_delete.add(cover_file)
            if not audio_file:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ '{quality_name}' –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω.")
                continue

            files_to_delete.add(audio_file)
            embed_cover_art(audio_file, cover_file)
            size_mb = file_manager.get_file_size_mb(audio_file)
            
            logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ '{quality_name}': –†–∞–∑–º–µ—Ä = {size_mb:.2f} MB")
            
            if size_mb <= 48:
                logger.info("‚úÖ –§–∞–π–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É. –ü—Ä–µ—Ä—ã–≤–∞—é —Ü–∏–∫–ª.")
                audio_file_to_send, cover_file_to_send, track_details['quality_name'] = audio_file, cover_file, quality_name
                break
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.2f} MB).")
                is_last_attempt = (i == len(QUALITY_HIERARCHY) - 1)
                if is_last_attempt:
                    logger.info("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∑–∞–ø—É—Å–∫–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ MP3.")
                    await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=f"üéß –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.2f} MB). –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
                    converted_file = convert_to_mp3(audio_file)
                    if converted_file:
                        files_to_delete.add(converted_file)
                        audio_file_to_send, cover_file_to_send, track_details['quality_name'] = converted_file, cover_file, "MP3 (320 kbps)"
                    else:
                        logger.error("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                else:
                    logger.info("–ü—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ.")
                    file_manager.safe_remove(audio_file)
                    if cover_file: file_manager.safe_remove(cover_file)

        if not audio_file_to_send:
            logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ –¥–∞–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞.")
            await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
            return

        await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text="üì§ –§–∞–π–ª –≥–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")

        original_name = Path(str(audio_file_to_send).replace(".mp3", ".flac")).name
        album_folder = audio_file_to_send.parent.name
        match = re.match(r"(?P<artist>.+?) - (?P<album>.+?) \((?P<year>\d{4})", album_folder)
        track_details.update(zip(['artist', 'album', 'year'], map(str.strip, match.groups())) if match else zip(['artist', 'album', 'year'], ["Unknown"]*3))
        track_details['title'] = re.sub(r"^\d+\.\s*", "", original_name.rsplit(".", 1)[0]).strip()
        
        ext = audio_file_to_send.suffix
        custom_filename = f"{track_details['artist']} - {track_details['title']} ({track_details['album']}, {track_details['year']}){ext}"
        
        quality_tech_info_match = re.search(r"\[(.*?)\]", album_folder)
        real_quality = quality_tech_info_match.group(1).replace('B', '-bit').replace('k', ' k') if quality_tech_info_match else track_details.get('quality_name', "N/A")

        caption_text = (
            f"üé§ **–ê—Ä—Ç–∏—Å—Ç:** `{track_details.get('artist', 'N/A')}`\n"
            f"üéµ **–¢—Ä–µ–∫:** `{track_details.get('title', 'N/A')}`\n"
            f"üíø **–ê–ª—å–±–æ–º:** {track_details.get('album', 'N/A')}\n"
            f"üóìÔ∏è **–ì–æ–¥:** {track_details.get('year', 'N/A')}\n\n"
            f"‚ú® **–ö–∞—á–µ—Å—Ç–≤–æ:** {real_quality}\n\n"
            f"–°–∫–∞—á–∞–Ω–æ —Å [Qobuz]({url})"
        )
        
        with open(audio_file_to_send, 'rb') as f:
            await context.bot.send_audio(chat_id=chat_id, audio=f, filename=custom_filename)

        if cover_file_to_send:
            with open(cover_file_to_send, 'rb') as img:
                await context.bot.send_photo(chat_id=chat_id, photo=img, caption=caption_text, parse_mode='Markdown')
        
        await context.bot.delete_message(chat_id=chat_id, message_id=sent_message.message_id)

    except Exception as e:
        logger.exception(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        for file_to_delete in files_to_delete:
            file_manager.safe_remove(file_to_delete)
        logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")