from telegram import Update
from telegram.ext import ContextTypes
from services.downloader import QobuzDownloader
from services.file_manager import FileManager
from config import Config
import logging
import re

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text(
        "üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å Qobuz.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /download <—Å—Å—ã–ª–∫–∞>"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
    await update.message.reply_text(
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/download <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ —Å Qobuz\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = ""
    if context.args:
        url = context.args[0]
    elif update.message and update.message.text:
        url = update.message.text.strip()

    if not url:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫.")
        return

    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {url}")

    if not re.match(r"https?://(www\.|open\.|play\.)?qobuz\.com/(.+)", url):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {url}")
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz.")
        return

    downloader = QobuzDownloader()
    file_manager = FileManager()

    try:
        await update.message.reply_text("‚è≥ –ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫...")
        logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
        
        # –£–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª –ø–æ –∫–∞—á–µ—Å—Ç–≤—É. –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑.
        audio_file, cover_file = await downloader.download_track(url)
        
        if not audio_file:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è {url}.")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
            return

        size = file_manager.get_file_size_mb(audio_file)
        if size > 50:
             logger.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {size:.2f} MB")
             await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size:.2f} MB) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.")
             file_manager.safe_remove(audio_file)
             file_manager.safe_remove(cover_file)
             return

        original_name = audio_file.name
        album_folder = audio_file.parent.name

        match = re.match(r"(?P<artist>.+?) - (?P<album>.+?) \((?P<year>\d{4})", album_folder)
        if match:
            artist = match.group("artist").strip()
            album = match.group("album").strip()
            year = match.group("year").strip()
        else:
            artist = "Unknown Artist"
            album = "Unknown Album"
            year = "0000"

        track_title = re.sub(r"^\d+\.\s*", "", original_name.rsplit(".", 1)[0])
        ext = audio_file.suffix
        custom_filename = f"{artist} - {track_title} ({album}, {year}){ext}"
        
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram.")
            with open(audio_file, 'rb') as f:
                await context.bot.send_audio(chat_id, f, filename=custom_filename)

            if cover_file:
                with open(cover_file, 'rb') as img:
                    await context.bot.send_photo(chat_id, img)
            logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        finally:
            file_manager.safe_remove(audio_file)
            file_manager.safe_remove(cover_file)
            logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

    except Exception as e:
        logger.exception("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")