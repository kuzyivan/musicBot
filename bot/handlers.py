from telegram import Update
from telegram.ext import ContextTypes
from services.downloader import QobuzDownloader
from services.file_manager import FileManager
from services.recognizer import AudioRecognizer
from config import Config
import logging
import re
import subprocess
from pathlib import Path
from typing import Optional
import shutil
import time
from collections import defaultdict
from functools import wraps

logger = logging.getLogger(__name__)

# --- –ë–õ–û–ö –î–õ–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ó–ê–ü–†–û–°–û–í (RATE LIMIT) ---
USER_TIMESTAMPS = defaultdict(float)
COOLDOWN_SECONDS = 30 # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥

def rate_limit(cooldown: int):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏."""
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            current_time = time.time()
            
            if current_time - USER_TIMESTAMPS[user_id] < cooldown:
                # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∞—É–¥–∏–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                if update.message:
                    await update.message.reply_text(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {cooldown} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
                return
            
            USER_TIMESTAMPS[user_id] = current_time
            return await func(update, context, *args, **kwargs)
        return wrapper
    return decorator
# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---


def embed_cover_art(audio_path: Path, cover_path: Optional[Path]):
    if not all([audio_path, cover_path, audio_path.exists(), cover_path.exists()]):
        return
    logger.info(f"üñºÔ∏è –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ {cover_path.name} –≤ —Ñ–∞–π–ª {audio_path.name}...")
    temp_output_path = audio_path.with_suffix(f".temp{audio_path.suffix}")
    try:
        command = [
            "ffmpeg", "-i", str(audio_path), "-i", str(cover_path), "-map", "0:a",
            "-map", "1:v", "-c", "copy", "-disposition:v:0", "attached_pic",
            "-id3v2_version", "3", str(temp_output_path)
        ]
        subprocess.run(command, check=True, capture_output=True)
        shutil.move(str(temp_output_path), str(audio_path))
        logger.info("‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–∞.")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–æ–∂–∫—É —Å –ø–æ–º–æ—â—å—é ffmpeg: {e.stderr.decode()}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–æ–∂–∫—É: {e}")
    finally:
        if temp_output_path.exists(): temp_output_path.unlink()

def convert_to_mp3(file_path: Path) -> Optional[Path]:
    mp3_path = file_path.with_suffix(".mp3")
    logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {file_path.name} –≤ MP3...")
    try:
        command = [
            "ffmpeg", "-i", str(file_path), "-map", "0:a:0", "-b:a", "320k",
            "-map", "0:v?", "-c:v", "copy", "-id3v2_version", "3", str(mp3_path),
        ]
        subprocess.run(command, check=True, capture_output=True)
        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {mp3_path.name}")
        return mp3_path
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {e.stderr.decode()}")
        return None

QUALITY_HIERARCHY = {
    "HI-RES (Max)": 27,
    "HI-RES (<96kHz)": 7,
    "CD (16-bit)": 6,
    "MP3 (320 kbps)": 5,
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤–µ—Ä—Å–∏–∏ 2.0 –∏ –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å Qobuz. üöÄ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/download <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")

async def process_and_send_audio(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    sent_message,
    initial_audio_file: Path,
    initial_cover_file: Optional[Path],
    url_for_caption: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    file_manager = FileManager()
    files_to_delete = set()
    track_details = {}

    try:
        if not initial_audio_file or not initial_audio_file.exists():
            await sent_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return

        files_to_delete.add(initial_audio_file)
        if initial_cover_file:
            files_to_delete.add(initial_cover_file)

        embed_cover_art(initial_audio_file, initial_cover_file)
        
        await sent_message.edit_text("üíø –§–∞–π–ª —Å–∫–∞—á–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä...")
        size_mb = file_manager.get_file_size_mb(initial_audio_file)
        logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: –†–∞–∑–º–µ—Ä = {size_mb:.2f} MB")
        
        audio_file_to_send = initial_audio_file
        if size_mb > 48:
            await sent_message.edit_text(f"üéß –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.2f} MB). –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
            converted_file = convert_to_mp3(initial_audio_file)
            if converted_file:
                files_to_delete.add(converted_file)
                audio_file_to_send = converted_file
            else:
                logger.error("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                await sent_message.edit_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.")
                return

        await sent_message.edit_text("üì§ –§–∞–π–ª –≥–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")

        original_name = Path(str(audio_file_to_send).replace(".mp3", ".flac")).name
        album_folder = audio_file_to_send.parent.name
        match = re.match(r"(?P<artist>.+?) - (?P<album>.+?) \((?P<year>\d{4})", album_folder)
        track_details.update(zip(['artist', 'album', 'year'], map(str.strip, match.groups())) if match else zip(['artist', 'album', 'year'], ["Unknown"]*3))
        track_details['title'] = re.sub(r"^\d+\.\s*", "", original_name.rsplit(".", 1)[0]).strip()

        ext = audio_file_to_send.suffix
        custom_filename = f"{track_details['artist']} - {track_details['title']} ({track_details['album']}, {track_details['year']}){ext}"

        quality_tech_info_match = re.search(r"\[(.*?)\]", album_folder)
        real_quality = quality_tech_info_match.group(1).replace('B', '-bit').replace('k', ' k') if quality_tech_info_match else "MP3 (320 kbps)"

        caption_text = (
            f"üé§ **–ê—Ä—Ç–∏—Å—Ç:** `{track_details.get('artist', 'N/A')}`\n"
            f"üéµ **–¢—Ä–µ–∫:** `{track_details.get('title', 'N/A')}`\n"
            f"üíø **–ê–ª—å–±–æ–º:** {track_details.get('album', 'N/A')}\n"
            f"üóìÔ∏è **–ì–æ–¥:** {track_details.get('year', 'N/A')}\n\n"
            f"‚ú® **–ö–∞—á–µ—Å—Ç–≤–æ:** {real_quality}\n\n"
            f"–°–∫–∞—á–∞–Ω–æ —Å [Qobuz]({url_for_caption})"
        )

        with open(audio_file_to_send, 'rb') as f:
            await context.bot.send_audio(chat_id=update.effective_chat.id, audio=f, filename=custom_filename)

        if initial_cover_file and initial_cover_file.exists():
            with open(initial_cover_file, 'rb') as img:
                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=img, caption=caption_text, parse_mode='Markdown')

        await sent_message.delete()
    finally:
        logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...")
        for file_to_delete in files_to_delete:
            file_manager.safe_remove(file_to_delete)
        logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

@rate_limit(COOLDOWN_SECONDS)
async def handle_audio_recognition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    audio_source = message.audio or message.voice
    if not audio_source: return

    sent_message = await message.reply_text("üîé –ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ, –ø—ã—Ç–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å...")
    temp_file_path = None
    try:
        temp_audio_file = await audio_source.get_file()
        temp_file_path = Path(f"{temp_audio_file.file_id}{Path(temp_audio_file.file_path).suffix or '.ogg'}")
        await temp_audio_file.download_to_drive(temp_file_path)
        
        recognizer = AudioRecognizer()
        track_info = recognizer.recognize(str(temp_file_path))
        
        if not track_info:
            await sent_message.edit_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫.")
            return

        artist, title = track_info['artist'], track_info['title']
        await sent_message.edit_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: `{artist} - {title}`. –ò—â—É –∏ —Å–∫–∞—á–∏–≤–∞—é —Å Qobuz...", parse_mode='Markdown')
        
        downloader = QobuzDownloader()
        audio_file, cover_file = downloader.search_and_download_lucky(artist, title)
        
        if not audio_file:
            await sent_message.edit_text(f"‚ùå –¢—Ä–µ–∫ `{artist} - {title}` –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Qobuz.", parse_mode='Markdown')
            return

        fake_url = "https://qobuz.com"
        await process_and_send_audio(update, context, sent_message, audio_file, cover_file, fake_url)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        if sent_message:
            await sent_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    finally:
        if temp_file_path and temp_file_path.exists():
            temp_file_path.unlink()

@rate_limit(COOLDOWN_SECONDS)
async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = context.args[0] if context.args else getattr(getattr(update, 'message', None), 'text', '').strip()
    if not url: return

    chat_id = update.effective_chat.id
    if not re.match(r"https?://(www\.|open\.|play\.)?qobuz\.com/(.+)", url):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz.")
        return

    downloader = QobuzDownloader()
    
    sent_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
    
    try:
        for quality_name, quality_id in QUALITY_HIERARCHY.items():
            await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=f"üíø –ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ: {quality_name}...")
            
            audio_file, cover_file = await downloader.download_track(url, quality_id)
            
            if audio_file:
                await process_and_send_audio(update, context, sent_message, audio_file, cover_file, url)
                return 
            
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ '{quality_name}' –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω. –ü—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–µ–µ.")

        await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤.")
    
    except Exception as e:
        logger.exception(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if sent_message:
            await sent_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")