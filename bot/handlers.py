from telegram import Update
from telegram.ext import ContextTypes
from services.downloader import QobuzDownloader
from services.savify_downloader import SavifyDownloader # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
from services.file_manager import FileManager
from services.recognizer import AudioRecognizer
from config import Config
import logging
import re
import subprocess
from pathlib import Path
from typing import Optional, Tuple
import shutil
import mutagen # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º mutagen –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–≥–æ–≤

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

def embed_cover_art(audio_path: Path, cover_path: Optional[Path]):
    if not all([audio_path, cover_path, audio_path.exists(), cover_path.exists()]):
        return
    logger.info(f"üñºÔ∏è –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ {cover_path.name} –≤ —Ñ–∞–π–ª {audio_path.name}...")
    temp_output_path = audio_path.with_suffix(f".temp{audio_path.suffix}")
    try:
        command = [
            "ffmpeg", "-i", str(audio_path), "-i", str(cover_path), "-map", "0:a",
            "-map", "1:v", "-c", "copy", "-disposition:v:0", "attached_pic",
            "-id3v2_version", "3", str(temp_output_path)
        ]
        subprocess.run(command, check=True, capture_output=True)
        shutil.move(str(temp_output_path), str(audio_path))
        logger.info("‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–∞.")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–æ–∂–∫—É —Å –ø–æ–º–æ—â—å—é ffmpeg: {e.stderr.decode()}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å –æ–±–ª–æ–∂–∫—É: {e}")
    finally:
        if temp_output_path.exists(): temp_output_path.unlink()

def convert_to_mp3(file_path: Path) -> Optional[Path]:
    mp3_path = file_path.with_suffix(".mp3")
    logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {file_path.name} –≤ MP3...")
    try:
        command = [
            "ffmpeg", "-i", str(file_path), "-map", "0:a:0", "-b:a", "320k",
            "-map", "0:v?", "-c:v", "copy", "-id3v2_version", "3", str(mp3_path),
        ]
        subprocess.run(command, check=True, capture_output=True)
        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {mp3_path.name}")
        return mp3_path
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {e.stderr.decode()}")
        return None

QUALITY_HIERARCHY = {
    "HI-RES (Max)": 27,
    "HI-RES (<96kHz)": 7,
    "CD (16-bit)": 6,
    "MP3 (320 kbps)": 5,
}

# --- –ö–æ–º–∞–Ω–¥—ã Start/Help (–æ–±–Ω–æ–≤–ª–µ–Ω—ã) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤–µ—Ä—Å–∏–∏ 2.0 –∏ –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å Qobuz –∏ Spotify. üöÄ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/download <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ (Qobuz –∏–ª–∏ Spotify)\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."
    )

# --- –ù–û–í–´–ô –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ì–†–£–ó–ö–ò ---

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä. 
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –≤–æ—Ä–∫–µ—Ä.
    """
    # –ü–æ–ª—É—á–∞–µ–º URL (–∫–∞–∫ –≤—ã –∏ –¥–µ–ª–∞–ª–∏, –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞)
    url = context.args[0] if context.args else getattr(getattr(update, 'message', None), 'text', '').strip()
    if not url: return

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
    if re.search(r"qobuz\.com/", url):
        await _download_qobuz(update, context, url)
    elif re.search(r"spotify\.com/", url):
        await _download_spotify(update, context, url)
    else:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è, —Ç.–∫. main.py —É–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Qobuz –∏–ª–∏ Spotify.")


async def _download_qobuz(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    """
    –õ–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Qobuz.
    (–ö–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ `handle_download` –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω —Å—é–¥–∞)
    """
    downloader = QobuzDownloader()
    sent_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–∞ Qobuz...")
    
    try:
        for quality_name, quality_id in QUALITY_HIERARCHY.items():
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id, 
                message_id=sent_message.message_id, 
                text=f"üíø Qobuz: –ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ: {quality_name}..."
            )
            
            # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            audio_file, cover_file = await downloader.download_track(url, quality_id)
            
            if audio_file:
                # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                await process_and_send_audio(
                    update, context, sent_message, 
                    audio_file, cover_file, 
                    url_for_caption=url, source="Qobuz"
                )
                return # –í—ã—Ö–æ–¥–∏–º, —Ä–∞–±–æ—Ç–∞ —Å–¥–µ–ª–∞–Ω–∞
            
            logger.warning(f"‚ö†Ô∏è Qobuz: –§–∞–π–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ '{quality_name}' –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω. –ü—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–µ–µ.")

        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id, 
            message_id=sent_message.message_id, 
            text="‚ùå Qobuz: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤."
        )
    
    except Exception as e:
        logger.exception(f"‚ùå Qobuz: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå Qobuz: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def _download_spotify(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    """
    –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ Spotify —Å –ø–æ–º–æ—â—å—é Savify.
    """
    downloader = SavifyDownloader()
    sent_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–∞ Spotify...")

    try:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id, 
            message_id=sent_message.message_id, 
            text=f"üíø Spotify: –ò—â—É —Ç—Ä–µ–∫ –∏ —Å–∫–∞—á–∏–≤–∞—é (—á–µ—Ä–µ–∑ YouTube)..."
        )
        
        audio_file, cover_file = await downloader.download_track(url)
        
        if audio_file:
            # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            await process_and_send_audio(
                update, context, sent_message, 
                audio_file, cover_file, 
                url_for_caption=url, source="Spotify"
            )
        else:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id, 
                message_id=sent_message.message_id, 
                text="‚ùå Spotify: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ YouTube."
            )
    except Exception as e:
        logger.exception(f"‚ùå Spotify: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå Spotify: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# --- –£–õ–£–ß–®–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ü–†–ê–í–ö–ò ---

async def process_and_send_audio(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    sent_message,
    initial_audio_file: Path,
    initial_cover_file: Optional[Path],
    url_for_caption: str,
    source: str # –î–æ–±–∞–≤–∏–ª–∏, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª —Ñ–∞–π–ª
):
    """
    –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –õ–Æ–ë–û–ô —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
    –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ—Ç ID3-—Ç–µ–≥–∏.
    """
    file_manager = FileManager()
    files_to_delete = set()
    track_details = {}

    try:
        if not initial_audio_file or not initial_audio_file.exists():
            await sent_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return

        files_to_delete.add(initial_audio_file)
        if initial_cover_file:
            files_to_delete.add(initial_cover_file)

        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É (–≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è)
        embed_cover_art(initial_audio_file, initial_cover_file)
        
        await sent_message.edit_text("üíø –§–∞–π–ª —Å–∫–∞—á–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–º–µ—Ä...")
        size_mb = file_manager.get_file_size_mb(initial_audio_file)
        logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: –†–∞–∑–º–µ—Ä = {size_mb:.2f} MB")
        
        audio_file_to_send = initial_audio_file
        
        # --- –õ–û–ì–ò–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò (–∫–∞–∫ —É –≤–∞—Å) ---
        if size_mb > 48: # –õ–∏–º–∏—Ç Telegram –Ω–∞ –∞—É–¥–∏–æ
            await sent_message.edit_text(f"üéß –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.2f} MB). –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
            converted_file = convert_to_mp3(initial_audio_file)
            if converted_file:
                files_to_delete.add(converted_file)
                audio_file_to_send = converted_file
            else:
                logger.error("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                await sent_message.edit_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.")
                return

        await sent_message.edit_text("üì§ –§–∞–π–ª –≥–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")

        # --- –ù–û–í–ê–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• ---
        track_details = _get_metadata_from_file(audio_file_to_send)
        
        # –ï—Å–ª–∏ —Ç–µ–≥–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, FLAC –æ—Ç Qobuz –±–µ–∑ —Ç–µ–≥–æ–≤),
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        if not track_details.get('title'):
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ID3-—Ç–µ–≥–∏, –ø–∞—Ä—Å–∏–º –∏–º—è –ø–∞–ø–∫–∏...")
            track_details = _get_metadata_from_qobuz_path(audio_file_to_send)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        real_quality = file_manager.get_audio_quality(audio_file_to_send) or "N/A"
        if "MP3" in real_quality and source == "Spotify":
             real_quality = "MP3 (–¥–æ 320 kbps)"

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–¥–ø–∏—Å—å ---
        ext = audio_file_to_send.suffix
        custom_filename = (
            f"{track_details.get('artist', 'Unknown')} - "
            f"{track_details.get('title', 'Unknown')} "
            f"({track_details.get('album', 'Unknown')}, {track_details.get('year', 'N/A')}){ext}"
        )

        caption_text = (
            f"üé§ **–ê—Ä—Ç–∏—Å—Ç:** `{track_details.get('artist', 'N/A')}`\n"
            f"üéµ **–¢—Ä–µ–∫:** `{track_details.get('title', 'N/A')}`\n"
            f"üíø **–ê–ª—å–±–æ–º:** {track_details.get('album', 'N/A')}\n"
            f"üóìÔ∏è **–ì–æ–¥:** {track_details.get('year', 'N/A')}\n\n"
            f"‚ú® **–ö–∞—á–µ—Å—Ç–≤–æ:** {real_quality}\n\n"
            f"–°–∫–∞—á–∞–Ω–æ —Å [{source}]({url_for_caption})"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        with open(audio_file_to_send, 'rb') as f:
            await context.bot.send_audio(
                chat_id=update.effective_chat.id, 
                audio=f, 
                filename=custom_filename,
                caption=caption_text, # –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å—å –ø—Ä—è–º–æ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º
                parse_mode='Markdown'
            )
        
        # –û—Ç–ø—Ä–∞–≤–∫—É –æ–±–ª–æ–∂–∫–∏ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, —Ç.–∫. –æ–Ω–∞ —É–∂–µ –≤ –ø–æ–¥–ø–∏—Å–∏
        # (–í–∞—à —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –µ–µ –æ—Ç–¥–µ–ª—å–Ω–æ, —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –ª—É—á—à–µ)
        await sent_message.delete()

    finally:
        logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...")
        for file_to_delete in files_to_delete:
            file_manager.safe_remove(file_to_delete)
        logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")


def _get_metadata_from_file(file_path: Path) -> dict:
    """–ß–∏—Ç–∞–µ—Ç ID3-—Ç–µ–≥–∏ (–¥–ª—è MP3 –æ—Ç Savify) –∏–ª–∏ FLAC-—Ç–µ–≥–∏."""
    details = {}
    try:
        audio = mutagen.File(file_path)
        if not audio:
            return {}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è, 
        # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–ª–∏ 'N/A'
        details['artist'] = audio.get('artist', ['N/A'])[0]
        details['title'] = audio.get('title', ['N/A'])[0]
        details['album'] = audio.get('album', ['N/A'])[0]
        
        # –ì–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–≥–∞—Ö
        year = (audio.get('date', []) or 
                audio.get('TDRC', []) or 
                audio.get('TDRL', []) or 
                ['N/A'])
        
        # mutagen.id3.TDRC -> 2011-01-28T00:00:00Z
        # –û—á–∏—â–∞–µ–º –≥–æ–¥, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 —Ü–∏—Ñ—Ä—ã
        details['year'] = re.sub(r'[^0-9]', '', str(year[0]))[:4]
        if not details['year']: details['year'] = 'N/A'

        return details
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ mutagen: {e}")
        return {}


def _get_metadata_from_qobuz_path(audio_file: Path) -> dict:
    """–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—É—Ç–∏ Qobuz (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)."""
    try:
        original_name = Path(str(audio_file).replace(".mp3", ".flac")).name
        album_folder = audio_file.parent.name
        match = re.match(r"(?P<artist>.+?) - (?P<album>.+?) \((?P<year>\d{4})", album_folder)
        
        details = {}
        details.update(zip(['artist', 'album', 'year'], map(str.strip, match.groups())) if match else zip(['artist', 'album', 'year'], ["Unknown"]*3))
        details['title'] = re.sub(r"^\d+\.\s*", "", original_name.rsplit(".", 1)[0]).strip()
        return details
    except Exception:
        return {}


# --- –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ê–£–î–ò–û (–æ–±–Ω–æ–≤–ª–µ–Ω –≤—ã–∑–æ–≤ process_and_send_audio) ---

async def handle_audio_recognition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    audio_source = message.audio or message.voice
    if not audio_source: return

    sent_message = await message.reply_text("üîé –ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ, –ø—ã—Ç–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å...")
    temp_file_path = None
    try:
        temp_audio_file = await audio_source.get_file()
        temp_file_path = Path(f"{temp_audio_file.file_id}{Path(temp_audio_file.file_path).suffix or '.ogg'}")
        await temp_audio_file.download_to_drive(temp_file_path)
        
        recognizer = AudioRecognizer()
        track_info = recognizer.recognize(str(temp_file_path))
        
        if not track_info:
            await sent_message.edit_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫.")
            return

        artist, title = track_info['artist'], track_info['title']
        await sent_message.edit_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: `{artist} - {title}`. –ò—â—É –∏ —Å–∫–∞—á–∏–≤–∞—é —Å Qobuz...", parse_mode='Markdown')
        
        downloader = QobuzDownloader()
        audio_file, cover_file = downloader.search_and_download_lucky(artist, title)
        
        if not audio_file:
            await sent_message.edit_text(f"‚ùå –¢—Ä–µ–∫ `{artist} - {title}` –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Qobuz.", parse_mode='Markdown')
            return

        fake_url = "https://qobuz.com" # URL –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –î–æ–±–∞–≤–ª—è–µ–º `source`, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        await process_and_send_audio(
            update, context, sent_message, 
            audio_file, cover_file, 
            fake_url, source="Qobuz (via Shazam)"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        await sent_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    finally:
        if temp_file_path and temp_file_path.exists():
            temp_file_path.unlink()