from telegram import Update
from telegram.ext import ContextTypes
from services.downloader import QobuzDownloader
from services.file_manager import FileManager
from config import Config
import logging
import re

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å Qobuz.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /download"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/download <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ —Å Qobuz\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    chat_id = update.effective_chat.id

    downloader = QobuzDownloader()
    file_manager = FileManager()

    try:
        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...")

        audio_file, cover_file = await downloader.download_track(url)

        if not audio_file:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫.")
            return

        size = file_manager.get_file_size_mb(audio_file)

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ ---
        original_name = audio_file.name
        album_folder = audio_file.parent.name  # –ù–∞–ø—Ä–∏–º–µ—Ä: "Kokoroko - Tuff Times Never Last (2025) [16B-44.1kHz]"

        match = re.match(r"(?P<artist>.+?) - (?P<album>.+?) \((?P<year>\d{4})", album_folder)
        if match:
            artist = match.group("artist").strip()
            album = match.group("album").strip()
            year = match.group("year").strip()
        else:
            artist = "Unknown"
            album = "Unknown"
            year = "0000"

        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
        track_title = re.sub(r"^\d+\.\s*", "", original_name.rsplit(".", 1)[0])
        ext = audio_file.suffix

        custom_filename = f"{artist} - {track_title} ({album}, {year}){ext}"
        # ------------------------------------

        try:
            with open(audio_file, 'rb') as f:
                if size <= 50:
                    await context.bot.send_audio(chat_id, f, filename=custom_filename)
                elif size <= Config.MAX_FILE_SIZE_MB:
                    await context.bot.send_document(chat_id, f, filename=custom_filename)
                else:
                    await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (>2GB).")
                    return

            if cover_file:
                with open(cover_file, 'rb') as img:
                    await context.bot.send_photo(chat_id, img)

            await update.message.reply_text("‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        finally:
            file_manager.safe_remove(audio_file)
            file_manager.safe_remove(cover_file)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")