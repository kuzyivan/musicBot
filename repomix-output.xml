This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    deploy.yml
.repomix/
  bundles.json
bot/
  handlers.py
services/
  downloader.py
  file_manager.py
.gitignore
.music_botOLD
config.py
main.py
README.md
requirements.txt
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomix/bundles.json">
{
  "bundles": {
    "repomixMusicBot-325": {
      "name": "repomixMusicBot",
      "created": "2025-08-25T12:10:15.936Z",
      "lastUsed": "2025-08-25T12:10:15.936Z",
      "tags": [],
      "files": []
    }
  }
}
</file>

<file path="services/file_manager.py">
from pathlib import Path
from typing import Optional
import os
import logging

logger = logging.getLogger(__name__)

class FileManager:
    @staticmethod
    def safe_remove(file_path: Optional[Path]):
        if file_path and file_path.exists():
            try:
                os.unlink(file_path)
                logger.info(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {file_path}")
            except OSError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

    @staticmethod
    def get_file_size_mb(file_path: Path) -> float:
        return file_path.stat().st_size / (1024 * 1024)
</file>

<file path=".gitignore">
.env
__pycache__/
*.pyc
Qobuz_Downloads/
bot.log
venv/
</file>

<file path=".music_botOLD">
import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
from subprocess import Popen, PIPE
from uuid import uuid4
from threading import Lock

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—É—Ç–∏
VENV_PYTHON = "/opt/qobuz-env/bin/python"
QOBUZ_DL = "/opt/qobuz-env/bin/qobuz-dl"
DOWNLOAD_DIR = "/root/musicBot/Qobuz/Downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –û—á–µ—Ä–µ–¥—å –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
download_queue = asyncio.Queue()
download_lock = Lock()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /download")

# –ö–æ–º–∞–Ω–¥–∞ /download
async def download_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìé –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if "qobuz.com/track/" in text:
        await download_queue.put((update, context, text))
        await update.message.reply_text("‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏... üåÄ")
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ Qobuz!")

# –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
def find_audio_files(directory):
    found_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith((".flac", ".mp3")):
                full_path = os.path.join(root, file)
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {full_path}")
                found_files.append(full_path)
    return found_files

# –í–æ—Ä–∫–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
async def download_worker():
    while True:
        update, context, url = await download_queue.get()
        chat_id = update.effective_chat.id

        try:
            temp_id = uuid4().hex
            logger.info(f"üîª –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: {url}")
            await context.bot.send_message(chat_id, f"üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–∞:\n{url}")

            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
            os.chdir(DOWNLOAD_DIR)

            # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            command = [
                QOBUZ_DL, "dl", url,
                "--no-db",
                "--quality", "6"
            ]
            process = Popen(command, stdout=PIPE, stderr=PIPE)
            stdout, stderr = process.communicate()

            stdout_decoded = stdout.decode().strip()
            stderr_decoded = stderr.decode().strip()

            if stdout_decoded:
                logger.info(stdout_decoded)
            if stderr_decoded:
                if "Error" in stderr_decoded or "Exception" in stderr_decoded:
                    logger.error(stderr_decoded)
                else:
                    logger.info(stderr_decoded)

            # –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
            downloaded_files = find_audio_files(DOWNLOAD_DIR)
            if not downloaded_files:
                await context.bot.send_message(chat_id, "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                continue

            track_file = downloaded_files[0]
            cover_file = os.path.join(os.path.dirname(track_file), "cover.jpg")
            cover_file = cover_file if os.path.exists(cover_file) else None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            file_size = os.path.getsize(track_file)
            size_mb = round(file_size / 1024 / 1024, 2)

            try:
                if file_size <= 50 * 1024 * 1024:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –∫–∞–∫ audio ({size_mb} MB)")
                    await context.bot.send_audio(chat_id=chat_id, audio=open(track_file, "rb"))
                elif file_size <= 2 * 1024 * 1024 * 1024:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –∫–∞–∫ document ({size_mb} MB)")
                    await context.bot.send_document(chat_id=chat_id, document=open(track_file, "rb"), filename=os.path.basename(track_file))
                else:
                    await context.bot.send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (> 2 –ì–ë).")
                    logger.warning(f"‚ùó –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {track_file} ({size_mb} MB)")
                    continue
            except Exception as send_err:
                logger.exception("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
                await context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

            if cover_file:
                await context.bot.send_photo(chat_id=chat_id, photo=open(cover_file, "rb"))

            # –£–¥–∞–ª–µ–Ω–∏–µ
            os.remove(track_file)
            if cover_file:
                os.remove(cover_file)

            await context.bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.")

        except Exception as e:
            logger.exception("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞")
            await context.bot.send_message(chat_id, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

        finally:
            download_queue.task_done()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("üöÄ KuzyMusicBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("download", download_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    async def on_startup(app):
        asyncio.create_task(download_worker())
        logger.info("ü§ñ KuzyMusicBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    application.post_init = on_startup
    application.run_polling()
</file>

<file path="config.py">
from pathlib import Path
from dotenv import load_dotenv
import os

load_dotenv()

class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    QOBUZ_LOGIN = os.getenv("QOBUZ_LOGIN")
    QOBUZ_PASSWORD = os.getenv("QOBUZ_PASSWORD")
    
    DOWNLOAD_DIR = Path("/root/musicBot/Qobuz/Downloads")
    MAX_FILE_SIZE_MB = 2000
    LOG_FILE = Path("logs/bot.log")
</file>

<file path="requirements.txt">
anyio==4.9.0
beautifulsoup4==4.13.4
certifi==2025.7.9
charset-normalizer==3.4.2
colorama==0.4.6
h11==0.14.0
httpcore==1.0.9
httpx==0.25.2
idna==3.10
mutagen==1.47.0
pathvalidate==3.3.1
pick==1.6.0
python-telegram-bot==20.7
qobuz-dl==0.9.9.10
requests==2.32.4
sniffio==1.3.1
soupsieve==2.7
tqdm==4.67.1
typing_extensions==4.14.1
urllib3==2.5.0
python-dotenv
</file>

<file path="main.py">
import logging
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from bot.handlers import start, help_command, handle_download
from config import Config
from dotenv import load_dotenv

def setup_logging():
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Config.LOG_FILE.parent.mkdir(exist_ok=True)
    
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO,
        handlers=[
            logging.FileHandler(Config.LOG_FILE, mode="a"),
            logging.StreamHandler()
        ]
    )
    # –ü–æ–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è "–±–æ–ª—Ç–ª–∏–≤—ã—Ö" –±–∏–±–ª–∏–æ—Ç–µ–∫, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram.ext").setLevel(logging.WARNING)

def main():
    load_dotenv()
    setup_logging()
    app = ApplicationBuilder().token(Config.BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("download", handle_download))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(r"qobuz\.com/track/"), 
        handle_download
    ))

    app.run_polling()

if __name__ == "__main__":
    main()
</file>

<file path=".github/workflows/deploy.yml">
name: üöÄ Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3

      - name: üöÄ Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
            APP_DIR="/root/musicBot"
            REPO_URL="https://github.com/kuzyivan/musicBot.git"

            # --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ ---
            echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞..."
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
            if [ ! -d .git ]; then
              git clone "$REPO_URL" .
            else
              git pull origin main
            fi

            # --- –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub ---
            echo "ü§´ –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤..."
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env
            echo "QOBUZ_LOGIN=${{ secrets.QOBUZ_LOGIN }}" >> .env
            echo "QOBUZ_PASSWORD=${{ secrets.QOBUZ_PASSWORD }}" >> .env
            echo "‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω."

            # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python ---
            echo "üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            if [ ! -d "venv" ]; then
              echo "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ venv..."
              python3 -m venv venv
            fi
            source venv/bin/activate

            # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            pip install --upgrade pip
            pip install -r requirements.txt

            # --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ---
            echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ª–æ–≥–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–æ–∫..."
            mkdir -p logs
            mkdir -p Qobuz/Downloads

            # --- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ ---
            echo "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ musicbot..."
            systemctl daemon-reload
            systemctl restart musicbot.service

            echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
</file>

<file path="bot/handlers.py">
from telegram import Update
from telegram.ext import ContextTypes
from services.downloader import QobuzDownloader
from services.file_manager import FileManager
from config import Config
import logging
import re

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text(
        "üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ —Å Qobuz.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /download <—Å—Å—ã–ª–∫–∞>"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
    await update.message.reply_text(
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/download <—Å—Å—ã–ª–∫–∞> ‚Äî —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ —Å Qobuz\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = ""
    if context.args:
        url = context.args[0]
    elif update.message and update.message.text:
        url = update.message.text.strip()

    if not url:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫.")
        return

    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {url}")

    if not re.match(r"https?://(www\.|open\.)?qobuz\.com/track/.+", url):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {url}")
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Qobuz.")
        return

    downloader = QobuzDownloader()
    file_manager = FileManager()

    try:
        await update.message.reply_text("‚è≥ –ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫...")
        logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")

        audio_file = None
        cover_file = None
        size = None

        for quality in ["6", "5", "3"]:
            logger.info(f"–ü—Ä–æ–±—É—é –∫–∞—á–µ—Å—Ç–≤–æ: {quality}")
            audio_file, cover_file = await downloader.download_track(url, quality=quality)
            if audio_file:
                size = file_manager.get_file_size_mb(audio_file)
                if size <= 50:
                    logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {size:.2f} MB. –ü–æ–¥—Ö–æ–¥–∏—Ç.")
                    break
                else:
                    logger.warning(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω, –Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size:.2f} MB). –ü—Ä–æ–±—É—é –Ω–∏–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ.")
                    file_manager.safe_remove(audio_file) # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                    audio_file = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∏–ª—Å—è
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ {quality}")
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
        if not audio_file:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è {url} –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–∞—á–µ—Å—Ç–≤.")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
            return

        original_name = audio_file.name
        album_folder = audio_file.parent.name

        match = re.match(r"(?P<artist>.+?) - (?P<album>.+?) \((?P<year>\d{4})", album_folder)
        if match:
            artist = match.group("artist").strip()
            album = match.group("album").strip()
            year = match.group("year").strip()
        else:
            artist = "Unknown Artist"
            album = "Unknown Album"
            year = "0000"

        track_title = re.sub(r"^\d+\.\s*", "", original_name.rsplit(".", 1)[0])
        ext = audio_file.suffix
        custom_filename = f"{artist} - {track_title} ({album}, {year}){ext}"
        
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram.")
            with open(audio_file, 'rb') as f:
                await context.bot.send_audio(chat_id, f, filename=custom_filename)

            if cover_file:
                with open(cover_file, 'rb') as img:
                    await context.bot.send_photo(chat_id, img)
            logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        finally:
            file_manager.safe_remove(audio_file)
            file_manager.safe_remove(cover_file)
            logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

    except Exception as e:
        logger.exception("–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
</file>

<file path="README.md">
# üéµ KuzyMusicBot

**Telegram-–±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–æ–≤ —Å Qobuz**

## ‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å [Qobuz](https://www.qobuz.com/)
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –æ–±–ª–æ–∂–∫—É
- –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
- –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–∞–π–ª –∏ Telegram-—á–∞—Ç –∞–¥–º–∏–Ω–∞

## üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
git clone https://github.com/kuzyivan/musicBot.git
cd musicBot
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
cp .env.example .env  # –∏ –∑–∞–ø–æ–ª–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏—è
</file>

<file path="services/downloader.py">
from pathlib import Path
from typing import Optional, Tuple
from config import Config
import logging
import os
from qobuz_dl.core import QobuzDL

logger = logging.getLogger(__name__)

class QobuzDownloader:
    def __init__(self):
        self.download_dir = Config.DOWNLOAD_DIR
        self.download_dir.mkdir(parents=True, exist_ok=True)
        
        self.client = QobuzDL()
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Qobuz...")
            self.client.get_tokens()
            self.client.initialize_client(
                Config.QOBUZ_LOGIN,
                Config.QOBUZ_PASSWORD,
                self.client.app_id,
                self.client.secrets
            )
            logger.info("–ö–ª–∏–µ–Ω—Ç Qobuz —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Qobuz!")
            self.client = None

    async def download_track(self, url: str, quality: str) -> Tuple[Optional[Path], Optional[Path]]:
        if not self.client:
            logger.error("–ö–ª–∏–µ–Ω—Ç Qobuz –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return None, None
            
        try:
            quality_id = int(quality)
            logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è URL: {url} —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ID: {quality_id}")
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            # –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 'quality' –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π 'limit_quality'
            self.client.handle_url(
                url,
                limit_limit_quality=quality_id,
                output_dir=self.download_dir,
                embed_art=True,
                no_db=True
            )

            audio_file, cover_file = self._find_downloaded_files()
            if audio_file:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {audio_file}")
            else:
                logger.warning("–°–∫–∞—á–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
            return audio_file, cover_file
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å qobuz-dl: {e}")
            logger.exception("Traceback –æ—à–∏–±–∫–∏:")
            return None, None

    def _find_downloaded_files(self) -> Tuple[Optional[Path], Optional[Path]]:
        for f in self.download_dir.glob("**/*.*"):
            if f.is_file() and f.suffix in {".flac", ".mp3", ".m4a", ".wav"}:
                audio_file = f
                cover_file = audio_file.parent / "cover.jpg"
                return audio_file, cover_file if cover_file.exists() else None
        return None, None
</file>

</files>
